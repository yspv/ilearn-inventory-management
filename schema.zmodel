generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

plugin zod {
  provider = "@core/zod"
}

abstract model Base {
  createdAt DateTime @default(now()) @map('created_at')
  updatedAt DateTime @updatedAt @map('updated_at')
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  isActive      Boolean   @default(true)
  isAdmin       Boolean   @default(false)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  accounts       Account[]
  sessions       Session[]
  ownInventories Inventory[]
  inventories    InventoryUser[]
  items          InventoryItem[]
  likes          InventoryItemLike[]
  comments       InventoryComment[]

  @@allow('read', true)
  @@allow('all', auth().isAdmin && auth().isActive)
  @@map("user")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?  @map("referesh_token")
  access_token      String?  @map("access_token")
  expires_at        Int?     @map("expires_at")
  token_type        String?  @map("token_type")
  scope             String?
  id_token          String?  @map("id_token")
  session_state     String?  @map("session_state")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@allow('create', true)

  @@unique([provider, providerAccountId])
  @@map("user_account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_session")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_token")
}

model Tag extends Base {
 id   BigInt @id @default(autoincrement())
 name String @unique
 inventories Inventory[]

 @@allow('read', true)
 @@allow('create,update', auth().isActive)
 @@allow('all', auth().isAdmin && auth().isActive)

 @@map('tag')
}

model Inventory extends Base {
  id          String   @id @default(cuid())
  title       String
  description String
  ownerId     String   @default(auth().id) @map("owner_id")
  categoryId  BigInt   @map('category_id')
  isPrivate   Boolean  @default(false) @map('is_private')
  version     Int      @default(1)

  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  category    Category @relation(fields: [categoryId], references: [id])

  tags           Tag[]
  items          InventoryItem[]
  members        InventoryUser[]
  fields         InventoryField[]
  comments       InventoryComment[]
  customIdFields CustomIdField[]

  @@allow('read', true)
  @@allow('all',  auth() == owner && auth().isActive)
  @@allow('all',  auth().isAdmin && auth().isActive)

  @@map('inventory')
}

model InventoryUser {
  id          String    @id @default(cuid())
  userId      String    @map('user_id')
  inventoryId String    @map('inventory_id')
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  @@unique([inventoryId, userId])

  @@allow('read', true)
  @@allow('all', auth().isAdmin && auth().isActive)
  @@allow('all', inventory.owner == auth() && auth().isActive)
  @@map('inventory_user')
}

model Category extends Base {
  id  BigInt @id @default(autoincrement())
  name String @unique

  inventories Inventory[]

  @@allow('read', true)
  @@allow('create', auth().isActive)
  @@allow('all', auth().isAdmin && auth().isActive)

  @@map('category')
}

model CustomIdField extends Base {
  id          String   @id @default(cuid())
  type        String
  format      String
  order       Int     @default(1)
  inventoryId String  @map('inventory_id')
  version     Int     @default(1)

  inventory Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  @@allow('all', auth() == inventory.owner && auth().isActive)
  @@allow('all', auth().isAdmin && auth().isActive)

  @@map('inventory_customidfield')
}

model InventoryField extends Base {
  id          String   @id @default(cuid())
  title       String
  description String
  inventoryId String
  type        String
  slot        Int      @default(1)
  orderIndex  Int
  required    Boolean  @default(false)
  isVisible   Boolean  @default(true)

  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  @@allow('read', true)
  @@allow('all', auth() == inventory.owner && auth().isActive)
  @@allow('all', auth().isAdmin && auth().isActive)

  @@map('inventory_field')
}

model InventoryItem extends Base {
  id          String  @id @default(cuid())
  customId    String  @map('custom_id')
  ownerId     String  @map('owner_id')
  inventoryId String  @map('inventory_id')
  string1     String?
  string2     String?
  string3     String?
  mlText1     String? @map('ml_text1')
  mlText2     String? @map('ml_text2')
  mlText3     String? @map('ml_text3')
  boolean1    Boolean?
  boolean2    Boolean?
  boolean3    Boolean?
  link1       String?
  link2       String?
  link3       String?
  num1        Int?
  num2        Int?
  num3        Int?
  sequnce     Int     @default(0)
  version     Int     @default(1)

  owner       User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  likes       InventoryItemLike[]

  @@unique([inventoryId, customId])

  @@allow('read', true)
  @@allow('all', auth() == inventory.owner && auth().isActive)
  @@allow('all', auth() == owner && auth().isActive)
  @@allow('all', auth().isAdmin && auth().isActive)

  @@map('inventory_item')
}

model InventoryItemLike {
  id     BigInt   @id   @default(autoincrement())
  date   DateTime @default(now())
  userId String   @map('user_id')
  itemId String   @map('item_id')

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  item InventoryItem @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@unique([userId, itemId])
  @@allow('read', true)
  @@allow('create,delete', auth().isActive && auth() == user)
  @@map('inventory_itemlike')
}

model InventoryComment extends Base {
  id          String @id @default(cuid())
  inventoryId String @map('inventory_id')
  userId      String @map('user_id')
  comment     String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  @@allow('read', true)
  @@allow('create', auth().isActive)
  @@allow('all', auth().isAdmin && auth().isActive)
  @@allow('all', auth() == inventory.owner)

  @@map('inventory_inventorycomment')
}