//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String              @id() @default(cuid())
  name           String?
  email          String              @unique()
  emailVerified  DateTime?           @map("email_verified")
  image          String?
  isActive       Boolean             @default(true)
  isAdmin        Boolean             @default(false)
  createdAt      DateTime            @default(now()) @map("created_at")
  updatedAt      DateTime            @updatedAt() @map("updated_at")
  accounts       Account[]
  sessions       Session[]
  ownInventories Inventory[]
  inventories    InventoryUser[]
  items          InventoryItem[]
  likes          InventoryItemLike[]
  comments       InventoryComment[]

  @@map("user")
}

model Account {
  id                String   @id() @default(cuid())
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?  @map("referesh_token")
  access_token      String?  @map("access_token")
  expires_at        Int?     @map("expires_at")
  token_type        String?  @map("token_type")
  scope             String?
  id_token          String?  @map("id_token")
  session_state     String?  @map("session_state")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt() @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("user_account")
}

model Session {
  id           String   @id() @default(cuid())
  sessionToken String   @unique() @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt() @map("updated_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_session")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_token")
}

model Tag {
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt() @map("updated_at")
  id          BigInt      @id() @default(autoincrement())
  name        String
  inventories Inventory[]

  @@map("tag")
}

model Inventory {
  createdAt      DateTime            @default(now()) @map("created_at")
  updatedAt      DateTime            @updatedAt() @map("updated_at")
  id             String              @id() @default(cuid())
  title          String
  description    String
  ownerId        String              @map("owner_id")
  categoryId     BigInt              @map("category_id")
  isPrivate      Boolean             @default(false) @map("is_private")
  version        Int                 @default(1)
  owner          User                @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  category       Category            @relation(fields: [categoryId], references: [id])
  tags           Tag[]
  items          InventoryItem[]
  members        InventoryUser[]
  templates      InventoryTemplate[]
  comments       InventoryComment[]
  customIdFields CustomIdField[]

  @@map("inventory")
}

model InventoryUser {
  id          String    @id() @default(cuid())
  userId      String    @map("user_id")
  inventoryId String    @map("inventory_id")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  @@unique([inventoryId, userId])
  @@map("inventory_user")
}

model Category {
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt() @map("updated_at")
  id          BigInt      @id() @default(autoincrement())
  name        String
  inventories Inventory[]

  @@map("category")
}

model CustomIdField {
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt() @map("updated_at")
  id          String    @id() @default(cuid())
  type        String
  format      String
  inventoryId String    @map("inventory_id")
  version     Int       @default(1)
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  @@map("inventory_customidfield")
}

model InventoryTemplate {
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt() @map("updated_at")
  id          BigInt           @id() @default(autoincrement())
  inventoryId String           @map("inventory_id")
  inventory   Inventory        @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  fields      InventoryField[]
  items       InventoryItem[]

  @@map("inventory_template")
}

model InventoryField {
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt() @map("updated_at")
  id          String            @id()
  title       String
  description String
  templateId  BigInt
  type        String
  slot        Int               @default(1)
  orderIndex  Int
  required    Boolean           @default(false)
  isVisible   Boolean           @default(true)
  template    InventoryTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@map("inventory_field")
}

model InventoryItem {
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime            @updatedAt() @map("updated_at")
  id          String              @id() @default(cuid())
  customId    String              @map("custom_id")
  ownerId     String              @map("owner_id")
  templateId  BigInt              @map("template_id")
  inventoryId String              @map("inventory_id")
  string1     String?
  string2     String?
  string3     String?
  mlText1     String?             @map("ml_text1")
  mlText2     String?             @map("ml_text2")
  mlText3     String?             @map("ml_text3")
  boolean1    Boolean?
  boolean2    Boolean?
  boolean3    Boolean?
  link1       String?
  link2       String?
  link3       String?
  num1        Int?
  num2        Int?
  num3        Int?
  version     Int                 @default(1)
  owner       User                @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  inventory   Inventory           @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  template    InventoryTemplate   @relation(fields: [templateId], references: [id], onDelete: Cascade)
  likes       InventoryItemLike[]

  @@unique([inventoryId, customId])
  @@map("inventory_item")
}

model InventoryItemLike {
  id     BigInt        @id() @default(autoincrement())
  date   DateTime      @default(now())
  userId String        @map("user_id")
  itemId String        @map("item_id")
  user   User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  item   InventoryItem @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@unique([userId, itemId])
  @@map("inventory_itemlike")
}

model InventoryComment {
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt() @map("updated_at")
  id          String    @id() @default(cuid())
  inventoryId String    @map("inventory_id")
  userId      String    @map("user_id")
  comment     String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  @@map("inventory_inventorycomment")
}
